package controllers

import (
	"context"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"

	_ "k8sAPI/docs" // docs is generated by Swag CLI, you have to import it.
	"k8sAPI/structs"

	//apiv1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

/* 아래 항목이 swagger에 의해 문서화 된다. */
// @Tags k8s list api
// @Summary k8s All List
// @Description Deploy, Pod, Service 조회
// @Accept json
// @Produce json
// @Router /k8s/list-pod-service [get]
func ListAll(c *gin.Context) {
	listDeployment, listDeploymentErr := Config().AppsV1().Deployments(K8sNamespace).List(context.TODO(), metav1.ListOptions{})
	listService, listServiceErr := Config().CoreV1().Services(K8sNamespace).List(context.TODO(), metav1.ListOptions{})
	listPod, listPodErr := Config().CoreV1().Pods(K8sNamespace).List(context.TODO(), metav1.ListOptions{})

	var deployInfoList []structs.AllinfoUnderDeployInfo
	var podInfoList []structs.AllinfoUnderPodInfo
	var serviceInfoList []structs.AllinfoUnderServiceInfo

	var allInfo structs.AllInfo

	for i := 0; i < len(listPod.Items); i++ {
		d := listPod.Items[i]
		var podInfo structs.AllinfoUnderPodInfo
		podInfo.Namespace = d.Namespace
		podInfo.Name = d.Name

		podInfoList = append(podInfoList, podInfo)
	}

	for i := 0; i < len(listService.Items); i++ {
		d := listService.Items[i]
		var serviceInfo structs.AllinfoUnderServiceInfo
		serviceInfo.Namespace = d.Namespace
		serviceInfo.Name = d.Name

		serviceInfoList = append(serviceInfoList, serviceInfo)
	}

	for i := 0; i < len(listDeployment.Items); i++ {
		d := listDeployment.Items[i]
		var deployInfo structs.AllinfoUnderDeployInfo
		deployInfo.Namespace = d.Namespace
		deployInfo.Name = d.Name

		deployInfoList = append(deployInfoList, deployInfo)
	}

	allInfo.DeployInfoList = deployInfoList
	allInfo.PodInfoList = podInfoList
	allInfo.ServiceInfoList = serviceInfoList

	fmt.Printf("Listing deployments in namespace %q:\n", K8sNamespace)
	if listDeploymentErr != nil {
		panic(listDeploymentErr)
	}
	for _, d := range listDeployment.Items {
		fmt.Printf(" * %s (%d replicas)\n", d.Name, *d.Spec.Replicas)
	}

	fmt.Printf("Listing Service in name %q:\n", K8sNamespace)
	if listServiceErr != nil {
		panic(listServiceErr)
	}
	for _, d := range listService.Items {
		fmt.Printf(" * %s \n", d.Name)
	}

	fmt.Printf("Listing pod in namespace %q:\n", K8sNamespace)
	if listPodErr != nil {
		panic(listPodErr)
	}

	for _, d := range listPod.Items {
		fmt.Printf(" * %s\n", d.Name)
	}

	c.JSON(http.StatusOK, gin.H{"All Result": allInfo})

}

/* 아래 항목이 swagger에 의해 문서화 된다. */
// @Tags k8s list api
// @Summary k8s Pod List
// @Description list Pod
// @Accept json
// @Produce json
// @Router /k8s/list-pod [get]
func ListPod(c *gin.Context) {
	//listPod, err := Config().CoreV1().Pods(K8sNamespace).Get(context.TODO(), "shiftone-go-1.15.15-20220221-58bcdfcf46-pblsq", metav1.GetOptions{})

	listPod, err := Config().CoreV1().Pods(K8sNamespace).List(context.TODO(), metav1.ListOptions{})

	fmt.Printf("Listing pod in namespace %q:\n", K8sNamespace)
	if err != nil {
		panic(err)
	}

	var podInfoList []structs.PodInfo

	for i := 0; i < len(listPod.Items); i++ {
		d := listPod.Items[i]
		var podInfo structs.PodInfo
		podInfo.Namespace = d.Namespace
		podInfo.Name = d.Name
		podInfo.PortInfo = d.Spec.Containers[0].Ports

		podInfoList = append(podInfoList, podInfo)
	}

	c.JSON(http.StatusOK, gin.H{"Pod Res": podInfoList})

}

/* 아래 항목이 swagger에 의해 문서화 된다. */
// @Tags k8s list api
// @Summary k8s Service List
// @Description list Service
// @Accept json
// @Produce json
// @Router /k8s/list-service [get]
func ListService(c *gin.Context) {
	listService, err := Config().CoreV1().Services(K8sNamespace).List(context.TODO(), metav1.ListOptions{})

	fmt.Printf("Listing Service in name %q:\n", K8sNamespace)
	if err != nil {
		panic(err)
	}

	var serviceInfoList []structs.ServiceInfo

	for i := 0; i < len(listService.Items); i++ {
		d := listService.Items[i]
		var serviceInfo structs.ServiceInfo
		serviceInfo.Namespace = d.Namespace
		serviceInfo.Name = d.Name
		serviceInfo.SpecInfo = d.Spec

		serviceInfoList = append(serviceInfoList, serviceInfo)
	}

	c.JSON(http.StatusOK, gin.H{"Service Res": serviceInfoList})
}

/* 아래 항목이 swagger에 의해 문서화 된다. */
// @Tags k8s list api
// @Summary k8s Service Deployment
// @Description list Service
// @Accept json
// @Produce json
// @Router /k8s/list-deployment [get]
func ListDeplyoment(c *gin.Context) {
	listDeployment, err := Config().AppsV1().Deployments(K8sNamespace).List(context.TODO(), metav1.ListOptions{})

	fmt.Printf("Listing deployments in namespace %q:\n", K8sNamespace)
	if err != nil {
		panic(err)
	}

	var deployInfoList []structs.DeployInfo

	for i := 0; i < len(listDeployment.Items); i++ {
		d := listDeployment.Items[i]
		var deployInfo structs.DeployInfo
		deployInfo.Namespace = d.Namespace
		deployInfo.Name = d.Name
		deployInfo.ContainerInfo = d.Spec.Template.Spec.Containers

		deployInfoList = append(deployInfoList, deployInfo)
	}

	c.JSON(http.StatusOK, gin.H{"Deployment Res": deployInfoList})
}
